//
//  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îê         ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
//  ‚îÇ  ‚îÄ‚îÄ‚î§ ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚î§  ‚îå‚îÄ‚îÄ‚îº‚îÄ‚î¨‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îê
//  ‚îú‚îÄ‚îÄ  ‚îÇ ‚ï∑ ‚îÇ ¬∑ ‚îÇ ¬∑ ‚îÇ  ‚ïµ  ‚îÇ ‚ïµ ‚îÇ ‚ï∑ ‚îÇ
//  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î§ ‚îå‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚î¥‚îÄ‚îò
//               ‚îî‚îÄ‚îò
//
//  Copyright (c) 2018 ShopGun. All rights reserved.

import Foundation

/**
 `Logger` is where all messages sent from inside the SDK are handled.
 
 You can assign your own `logHandler` callback, which will be notified of any SDK messages. You can then do as you like with these messages (filter them, print them, save to disk, etc.).
 */
final public class Logger {
    
    /**
     The callback you set here will be passed any future log messages from the SDK. This callback will always be called on the main queue.
     
     By default this will print messages to the console that have a `.error` or `.important` log level.
     
     If you set this to `nil`, logs will not be printed or kept.
     */
    public static var logHandler: LogHandler? = Logger.printCriticalMessages
    
    /**
     The signature of a function that can handle log messages sent from the ShopGun SDK.
     
     Users of the SDK can use this to print or forward messages that the SDK generates.
     - parameter message: The log message generated by the SDK
     - parameter level: What 'kind/severity' this log represents. Could be used for filtering. See `LogLevel`.
     - parameter source: What part of the SDK triggered this message. Could be used for filtering. See `LogSource`.
     - parameter location: Where (file/line/function) in the SDK this message was triggered. See `LogLocation`.
     */
    public typealias LogHandler = (_ message: String, _ level: LogLevel, _ source: LogSource, _ location: LogLocation) -> Void
    
    /**
     When logging a message, this defines its 'type' or 'severity'. It is important to pick the correct LogLevel for the type of message that is being logged.
     
     The LogLevel can be used by the `LogHandler` to filter messages that are too verbose or not of interest, or to change how the message is printed to the console (eg. prefix an emoji)
     */
    public enum LogLevel {
        /// Critical errors within the SDK (eg. unable to complete a request).
        case error
        /// Anything that isnt an error, but should be seen by the developer (eg. unable to do something, so a fallback was triggered).
        case important
        /// Other logs that aren't important, but might be of interest (eg. request completed successfully)
        case verbose
        /// For logs whose purpose is solely for debugging the SDK. Probably only relevant while in the process of developing a feature.
        case debug
        /// For logs that contain performance analytics (eg. request completion time)
        case performance
        
        /// The `LogLevel`s that should probably be always logged (`error` & `important`). This can be used as a filter by the `LogHandler`
        public static var criticalLevels: [LogLevel] = [.error, important]
        /// All the `LogLevel`s
        public static var allLevels: [LogLevel] = [.error, important, .verbose, .debug, .performance]
    }
    
    /**
     All the possible components of the SDK that can trigger a log.
     
     When logging a message it is important to define which 'part' of the SDK the log came from. This way the `LogHandler` can filter out messages from parts of the SDK it is not interested in, or change how it prints the message.
     */
    public enum LogSource {
        /// The main part of the SDK - so not from any specific component.
        case ShopGunSDK
        /// A message from the CoreAPI component (which talks to the ShopGun API).
        case CoreAPI
        /// A message from the EventsTracker component (which caches/sends events to the ShopGun server).
        case EventsTracker
        /// A message from the GraphAPI component (which talks to the ShopGun Graph API).
        case GraphAPI
        /// A message from the PagedPublication view (which renders an interactive catalog).
        case PagedPublicationViewer
        /// In case none of the above are relevant, the LogSource can provide its own `name` (for example if someone outside the SDK wishes to log via the `LogHandler`).
        case other(name: String)
        
        /// The name that will be prefixed to all the log messages from this source.
        fileprivate var sourceName: String {
            switch self {
            case .ShopGunSDK:
                return "ShopGunSDK"
            case .CoreAPI:
                return "ShopGunSDK.CoreAPI"
            case .EventsTracker:
                return "ShopGunSDK.EventsTracker"
            case .GraphAPI:
                return "ShopGunSDK.GraphAPI"
            case .PagedPublicationViewer:
                return "ShopGunSDK.PagedPublicationViewer"
            case .other(let name):
                return "ShopGunSDK.\(name)"
            }
        }
    }
    
    /**
     Defines the location (path/function/line) from which a log was called.
     */
    public struct LogLocation {
        /// The file path of where a log was triggered.
        public let filePath: String
        /// The name of the function where a log was triggered.
        public let functionName: String
        /// The linenumber within `filePath` where a log was triggered.
        public let lineNumber: Int
        
        /// A shortcut for getting the last component of the `filePath`.
        public var fileName: String {
            return filePath.components(separatedBy: "/").last ?? filePath
        }
    }
    
    /**
     Forwards a message to the static ShopGun.logHandler callback (on the main queue). Prefixes the message with a 'source name' (eg. "[ShopGunSDK.CoreAPI]", based on the provided `LogSource`.
     - parameter message: The message to send to the LogHandler.
     - parameter level: What 'kind/severity' this log represents. See `LogLevel`.
     - parameter source: What part of the SDK triggered this message. See `LogSource`.
     - parameter file: The path to the file in which this log function was called. If omitted it will default to the call-site filepath (`#file`).
     - parameter function: The name of the function in which this log function was called. If omitted it will default to the call-site function name (`#function`).
     - parameter line: The line number in the file in which this log function was called. If omitted it will  default to the call-site line number (`#line`).
     */
    public static func log(_ message: String, level: LogLevel, source: LogSource, file: String = #file, function: String = #function, line: Int = #line) {
        guard let handler = logHandler else { return }
        
        DispatchQueue.main.async {
            
            let sourceName = source.sourceName
            handler("[\(sourceName)] \(message)", level, source, LogLocation(filePath: file, functionName: function, lineNumber: line))
        }
    }
    
    /// A default log handler for printing only critical messages to the console.
    fileprivate static func printCriticalMessages(message: String, level: LogLevel, source: LogSource, location: LogLocation) {
        
        let output: String
        switch level {
        case .error:
            output = """
            ‚ÅâÔ∏è \(message)
            üëâ \(location.functionName) @ \(location.fileName):\(location.lineNumber)
            """
        case .important:
            output = "‚ö†Ô∏è \(message)"
        default:
            return
        }
        
        print(output)
    }
}
