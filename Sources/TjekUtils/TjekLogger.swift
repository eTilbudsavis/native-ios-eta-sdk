///
///  Copyright (c) 2021 Tjek. All rights reserved.
///

import Foundation

public class TjekLogger {
    public static let shared = TjekLogger()
    
    /**
     A struct containing a function that will receive the details about a log.
     Users of the SDK can use this to print or forward messages that the SDK generates.
     */
    public struct LogHandler {
        public var handle: (_ type: LogType, _ message: String, _ location: LogLocation) -> Void
        
        /**
         Generate a LogHandler using the passed-in function.
         
         - parameter type: What 'kind/severity' this log represents. Could be used for filtering. See `TjekLogger.LogType`.
         - parameter message: The log message generated by the SDK
         - parameter location: Where (file/line/function) this message was triggered. See `TjekLogger.LogLocation`.
         */
        public init(_ handle: @escaping (_ type: LogType, _ message: String, _ location: LogLocation) -> Void) {
            self.handle = handle
        }
        
        public func appending(_ handler: LogHandler) -> LogHandler {
            LogHandler { type, message, location in
                self.handle(type, message, location)
                handler.handle(type, message, location)
            }
        }
    }

    /**
     When logging a message, this defines its 'type' or 'severity'. It is important to pick the correct LogType for the type of message that is being logged.
     
     The LogType can be used by the `TjekLogger.LogHandler` to filter messages that are too verbose or not of interest, or to change how the message is printed to the console (eg. prefix an emoji)
     */
    public enum LogType: Equatable, CaseIterable {
        /// Critical errors within the SDK (eg. unable to complete a request).
        case error
        /// Anything that isnt an error, but should be seen by the developer (eg. unable to do something, so a fallback was triggered).
        case warning
        /// Other logs that aren't important, but might be of interest (eg. request completed successfully)
        case info
        /// For logs whose purpose is solely for debugging the SDK. Probably only relevant while in the process of developing a feature.
        case debug
        
        public static let allTypes: Set<LogType> = Set(LogType.allCases)
    }
    
    /**
     Defines the location (path/function/line) from which a log was called.
     */
    public struct LogLocation {
        /// The file path of where a log was triggered.
        public let filePath: String
        /// The name of the function where a log was triggered.
        public let functionName: String
        /// The linenumber within `filePath` where a log was triggered.
        public let lineNumber: Int
        
        /// A shortcut for getting the last component of the `filePath`.
        public var fileName: String {
            return filePath.components(separatedBy: "/").last ?? filePath
        }
        
        public init(filePath: String, functionName: String, lineNumber: Int) {
            self.filePath = filePath
            self.functionName = functionName
            self.lineNumber = lineNumber
        }
    }

    fileprivate var handler: LogHandler = .printLogs([.error])
    
    /// Replace the current LogHandler with a new one.
    /// By default we print 'error' logs to the console.
    public func setHandler(_ handler: LogHandler) -> Void {
        self.handler = handler
    }
    
    /// Add an additional LogHander. Any handlers that have already been set will still be called (before this handler), when a message is logged.
    public func addHandler(_ handler: LogHandler) -> Void {
        self.handler = self.handler.appending(handler)
    }

    /**
     Send a log message of the specified `type` to any handlers that have been added to this logger.
     
     - parameter type: What 'kind/severity' this log represents. See `TjekLogger.LogType`.
     - parameter message: The message to send to the LogHandler.
     - parameter file: The path to the file in which this log function was called. If omitted it will default to the call-site filepath (`#file`).
     - parameter function: The name of the function in which this log function was called. If omitted it will default to the call-site function name (`#function`).
     - parameter line: The line number in the file in which this log function was called. If omitted it will  default to the call-site line number (`#line`).
     */
    public func log(_ type: LogType = .debug, _ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        let location = LogLocation(filePath: file, functionName: function, lineNumber: line)
        handler.handle(type, message, location)
    }
}
extension TjekLogger {
    public func debug(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        log(.debug, message, file: file, function: function, line: line)
    }
    
    public func info(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        log(.info, message, file: file, function: function, line: line)
    }
    
    public func warning(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        log(.warning, message, file: file, function: function, line: line)
    }
    
    public func error(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        log(.error, message, file: file, function: function, line: line)
    }
}

extension TjekLogger {
    
    /**
     Send a log message of the specified `type` to any handlers that have been added to the `.shared` logger.
     
     - parameter type: What 'kind/severity' this log represents. See `TjekLogger.LogType`.
     - parameter message: The message to send to the LogHandler.
     - parameter file: The path to the file in which this log function was called. If omitted it will default to the call-site filepath (`#file`).
     - parameter function: The name of the function in which this log function was called. If omitted it will default to the call-site function name (`#function`).
     - parameter line: The line number in the file in which this log function was called. If omitted it will  default to the call-site line number (`#line`).
     */
    public static func log(_ type: LogType = .debug, _ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        shared.log(type, message, file: file, function: function, line: line)
    }
    
    public static func debug(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        shared.debug(message, file: file, function: function, line: line)
    }
    
    public static func info(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        shared.info(message, file: file, function: function, line: line)
    }
    
    public static func warning(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        shared.warning(message, file: file, function: function, line: line)
    }
    
    public static func error(_ message: String, file: String = #file, function: String = #function, line: Int = #line) {
        shared.error(message, file: file, function: function, line: line)
    }
}

extension TjekLogger.LogHandler {
    
    /// Builds a LogHandler that prints a message to the console.
    /// The `print` command is called on the main queue.
    /// - parameter logTypeMask: Defines which log types to print. If nil (the default), all logs are printed
    public static func printLogs(_ logTypeMask: Set<TjekLogger.LogType>? = nil) -> TjekLogger.LogHandler {
        TjekLogger.LogHandler { type, message, location in
            // check if we are looking for this specific type of log. otherwise eject.
            if let mask = logTypeMask, !mask.contains(type) {
                return
            }
            
            DispatchQueue.main.async {
                let output: String
                switch type {
                case .error:
                    output = """
                    ‚ùå \(message)
                     ‚Ü≥ \(location.functionName) @ \(location.fileName):\(location.lineNumber)
                    """
                case .warning:
                    output = "üî∂ \(message)"
                case .info:
                    output = "üîµ \(message)"
                case .debug:
                    output = "üü¢ \(message)"
                }
                
                print(output)
            }
        }
    }
}
